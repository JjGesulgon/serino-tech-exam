=======================================================
Question #1 - React - Identify the Problem and Refactor
=======================================================

Please identify the problems and tell us what the problems are, then improve this React Component by coding your own version!

It would be a plus point if you can convert/refactor them into React hooks.

class MyComponent extends React.Component {
  constructor(props) {
    // set the default internal state
    this.state = {
      clicks: 0
    };
  }

  componentDidMount() {
    this.refs.myComponentDiv.addEventListener('click', this.clickHandler);
  }

  componentWillUnmount() {
    this.refs.myComponentDiv.removeEventListener('click', this.clickHandler);
  }

  clickHandler() {
    this.setState({
      clicks: this.clicks + 1
    });
  }

  render() {
    let children = this.props.children;

    return (
      <div className="my-component" ref="myComponentDiv">
      <h2>My Component ({this.state.clicks} clicks})</h2>
      <h3>{this.props.headerText}</h3>
    {children}
    </div>
    );
  }
}

======
ANSWER
======
Put your answer here: Below is the refactored code. For the explanation, please refer to the PDF file included.


"use client";
import React, { useState, useEffect, useRef } from 'react';

const MyComponent = (props) => {
  // State for tracking the number of clicks
  const [clicks, setClicks] = useState(0);

  // Ref to hold a reference to the component's div element
  const myComponentDivRef = useRef(null);

  // Event handler for click events
  const clickHandler = () => {
    // Update the state to reflect the increased number of clicks
    setClicks(clicks + 1);
  };

  useEffect(() => {
    // Access the current value of the ref, which points to the div element
    const divElement = myComponentDivRef.current;

    // Event handler for the click event
    const handleEvent = () => clickHandler();

    // Add a click event listener to the div element
    divElement.addEventListener('click', handleEvent);

    // Cleanup function to remove the event listener when the component unmounts
    return () => {
      divElement.removeEventListener('click', handleEvent);
    };
  }, [clicks]); // Include clicks in the dependency array to avoid stale closures

  // Render the component
  return (
    <div className="my-component" ref={myComponentDivRef} data-testid="my-component">
      <h2>My Component ({clicks} clicks)</h2>
    </div>
  );
};

export default MyComponent;





=======================================================
Question #2 - React - Solve the Problem
=======================================================

Complete the following <TodoList> component to display todos and allow for adding and removing of todo items


const todosReducer = (state, action) => { 
 switch (action.type) {
   case 'ADD_TODO':
   case 'REMOVE_TODO':
 }


};

const TodoList = () => {
 
 const [todos, dispatch] = useReducer(todosReducer, []);

 return (
   <div>
     <ul>
       {todos.map((todo) => (
         <li><button>Remove todo</button></li>
       ))}
     </ul>
     <button>Add todo</button>
   </div>
 );
};


======
ANSWER
======
Put your answer here: Below is the completed code. For the explanation, please refer to the PDF file included.


"use client";
import React, { useReducer, useState } from 'react';

const todosReducer = (state, action) => {
  switch (action.type) {
    case 'ADD_TODO':
      // Add a new todo with a unique id and text payload
      return [...state, { id: Date.now(), text: action.payload }];
      
    case 'REMOVE_TODO':
      // Remove todo based on the id payload
      return state.filter((todo) => todo.id !== action.payload);

    default:
      // Return the current state if the action type is not recognized
      return state;
  }
};

// TodoList Component
const TodoList = () => {
  // UseReducer hook to manage state using the todosReducer function
  const [todos, dispatch] = useReducer(todosReducer, []);

  // State to manage the input value for adding a new todo
  const [newTodo, setNewTodo] = useState('');

  // Function to handle adding a new todo
  const addTodo = () => {
    if (newTodo.trim() !== '') {
      // Dispatch the ADD_TODO action with the newTodo payload
      dispatch({ type: 'ADD_TODO', payload: newTodo });
      // Clear the input field after adding a todo
      setNewTodo('');
    }
  };

  // Function to handle removing a todo based on its id
  const removeTodo = (id) => {
    // Dispatch the REMOVE_TODO action with the todo's id as payload
    dispatch({ type: 'REMOVE_TODO', payload: id });
  };

  // Render the TodoList component
  return (
    <div>
      {/* Display the list of todos */}
      <ul>
        {todos.map((todo) => (
          <li key={todo.id}>
            {/* Display the todo text */}
            {todo.text} 
            {/* Button to remove the todo, onClick triggers removeTodo with todo's id */}
            <button className="ml-2 text-red-500" onClick={() => removeTodo(todo.id)}>Remove todo</button>
          </li>
        ))}
      </ul>
      
      {/* Input field to add a new todo, onChange updates the newTodo state */}
      <div>
        <input
          type="text"
          value={newTodo}
          onChange={(e) => setNewTodo(e.target.value)}
          placeholder="Enter todo"
        /> 
        {/* Button to add a new todo, onClick triggers addTodo */}
        <button className='ml-2 text-green-500' onClick={addTodo}>Add todo</button>
      </div>
    </div>
  );
};

// Export the TodoList component
export default TodoList;


